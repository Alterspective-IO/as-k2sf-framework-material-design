import _ from "lodash";
import { ProcessedTarget, TargetType } from "../../Common/commonSettings";
import { AS_K2_DataTable_Default_Column_Settings, AS_K2_DataTable_Default_Settings, AS_OptGrid_Header_Column_Info_Default } from "./defaults";
import { IPassPack, OptColumnExtended, OptColumnHeaderInfo, OptGridExtended, OptHeader } from "./interfaces";
import { IASK2DataTableSettings } from "./settings";
import { applyK2FormatToFormatter, applyK2StyleToRenderer } from "./StyleRenderers";
import { applySettingsToObject } from "../../Common/ObjectHelpers";
import { IViewInstance, ListViewInstance, so_Controller } from "@alterspective-io/as-k2sf-framework"



export type ConfigureColumnsReturnType =
{
    
        columns: OptColumnExtended[];
        headers: OptColumnHeaderInfo[];
    
}
  /**
   * configure the grid columns with autogenerated columns and any specified columns
   * @param newDataTable - the data table to configure
   * @param target
   * @returns
   */
export function configureColumns(
    passPack: IPassPack,
    settings: IASK2DataTableSettings
  ): ConfigureColumnsReturnType | undefined {
    //newDataTable: AsMaterialdesignDatatableExtended,

    let retValue :ConfigureColumnsReturnType = {
        columns: [],
        headers: []
    }

    if (!passPack) return retValue;
   if(!settings)
   {
        settings = new AS_K2_DataTable_Default_Settings()
   }

    



    //set return values to that of the passed in target settings
    retValue.columns = settings.optGrid?.columns || [];
    retValue.headers = settings.optGrid?.header?.columns || [];

    if (passPack.target.type == TargetType.controls) {
    
        //Check if we need to autogenerate columns, but only for controls
        retValue.columns = configureColumnsForControl(passPack, retValue.columns);
      
    } //if a view then created based on the existing list view settings
    else {
        let pair  = configureColumnsForView( passPack, settings, 
          retValue.columns, retValue.headers);
        retValue.columns = pair.columns
        retValue.headers = pair.headers
    }

    //Ensure the column defaults are applied to existing columns 
    applyDefaultsToColumns(retValue.columns, passPack);

   return retValue
  }




function configureColumnsForView( passPack: IPassPack, settings: IASK2DataTableSettings,
   gridColumns: OptColumnExtended[], gridHeaders: OptColumnHeaderInfo[]) 
:ConfigureColumnsReturnType
{

  if (passPack.processedSettings.autoGenerateColumns != true)
  {
    return { columns: gridColumns, headers: gridHeaders}
  }
  
    let retValueColumns = new Array<OptColumnExtended>()
    let retValueHeaders =  new Array<OptColumnHeaderInfo>()
    let vi = passPack.target.referencedK2Object as IViewInstance;
    let lvi = vi.as(ListViewInstance);
    let fields = vi.rawData.fields.field as so_Controller.Field[];
    let listViewColumns = lvi.getColumnControls();

    let systemDefaults = new AS_K2_DataTable_Default_Settings()
    //set the absolute minimum column width, look in passed in settings, then system defaults and then 50
    let minWidthOfColumn = settings.columnDefaults?.minWidth || settings.optGrid?.columnOptions?.minWidth || systemDefaults.columnDefaults.minWidth || systemDefaults.optGrid.columnOptions?.minWidth || 50
 

    for (let colsIndex = 0; colsIndex < listViewColumns.length; colsIndex++) {    
        const listViewColumn = listViewColumns[colsIndex];
        if(!listViewColumn.header?.value) continue; //if not header then skip
     

        //Add processing info from K2 for users to debug
        let extraInfo: any = {}; //place to store processing info for developer to see what happened
        let processingIssues: any = {}; //add any processing issue here

        //Get the K2 field ( data field ) that this header is relagted to
        let field = fields.find((f) => f.id == listViewColumn.header?.fieldId);
        let systemName =  field?.propertyName || listViewColumn.header?.value || "";
        let colName =listViewColumn.display?.field?.name || listViewColumn.header?.value 
        //let newColumnName = listViewColumn.header.value

       

        //Setup objects and add to Array Results
        let newColSettings= createNewColumnWithSystemAndUserDefaults(passPack,colName)
        newColSettings.name=colName
        let newColHeaderSettings = createNewColumnHeaderWithSystemAndUserDefaults(passPack,colName) 
        newColHeaderSettings.name=colName
        retValueColumns.push(newColSettings)
        retValueHeaders.push(newColHeaderSettings)

        let existingColConfig = gridColumns.find(gc=>gc.name==colName)
        if(existingColConfig)
        {
          continue;
          //applySettingsToObject(newColSettings,existingColConfig,"settings")
        }

        newColSettings.header = listViewColumn.header?.value 
        newColSettings.extraInfo=extraInfo
        

        
        //Get the K2 Grid TD element for the column to get styling settings not found in data objects
        let columnTableDivisionElement = listViewColumn.header?.getHTMLElement().parentElement!.parentElement!
            .parentElement!.parentElement!;

        //Check if the column is hidden
        let parentDisplay = getComputedStyle(
            columnTableDivisionElement
        ).display;
        if (parentDisplay == "none") {
            newColSettings.hidden = true;
        }
    

        //get the currnet K2 column width and apply
        try {
            let computedWidth = Number.parseFloat(
                getComputedStyle(columnTableDivisionElement).width
            );
            if(!isNaN(computedWidth))
            {   
              newColSettings.minWidth = computedWidth;
              if(newColSettings.minWidth < minWidthOfColumn) newColSettings.minWidth = minWidthOfColumn
            }
        } catch (ex) {
            processingIssues[`Failed to set grid list [${passPack.target.referencedK2Object.name}] header [${newColSettings.header}] width `] = ex;
        }

        

        //get the styles fom the different K2 controls
        let headerCellStyle = listViewColumn.header?.rawData?.properties?.styles?.style;
        let displayCellStyle = listViewColumn.display?.rawData.properties.styles.style; //.font.color
        let colCellStyle = listViewColumn.column?.rawData.properties?.styles?.style;

        extraInfo.k2HeaderCellStyle = headerCellStyle;
        extraInfo.k2DisplayCellStyle = displayCellStyle;
        extraInfo.k2ColStyle = colCellStyle;
        // extraInfo.listViewColumn = listViewColumn //cannot add object with recursive references in

        //Set the ALIGN properties - Note - align is not set in styles renderer or fomatter
        //match col styles first then override with header and display if required
        if (colCellStyle?.text?.align) {
            newColSettings.align = colCellStyle.text.align.toLowerCase();
        }

        //style Headers
        if (headerCellStyle?.text?.align) {
            newColHeaderSettings.align = headerCellStyle.text.align.toLowerCase();
        }

        //style display items
        if (displayCellStyle?.text?.align) {
            newColSettings.align = displayCellStyle.text.align.toLowerCase();
        }

        newColSettings.renderer = applyK2StyleToRenderer(
            displayCellStyle,
            newColSettings.renderer
        );

        newColSettings.formatter = applyK2FormatToFormatter(
            displayCellStyle,
            newColSettings.formatter, systemName,
            listViewColumn.display?.dataType
        );

        
    }

    return { columns: retValueColumns, headers: retValueHeaders}
}

function createNewColumnHeaderWithSystemAndUserDefaults(passPack:IPassPack, name: string) {
    
    let settings = passPack.processedSettings as IASK2DataTableSettings
    

//create with system defaults
    let retValue = new AS_OptGrid_Header_Column_Info_Default();
    retValue.name = name;

    //update with user specific defaults
    applySettingsToObject(retValue, settings.optGrid?.header?.columns?.find(h=>h.name==name));

    return retValue
    
  
}

function configureColumnsForControl(passPack: IPassPack, gridColumns: OptColumnExtended[]):OptColumnExtended[] {
    if (passPack.processedSettings.autoGenerateColumns == true) {
        let autoGeneratedColumns = autoGenerateColumns(
            passPack,
            passPack.target.referencedK2Object.smartobject.items
        );
        if (autoGeneratedColumns)
            gridColumns = gridColumns.concat(autoGeneratedColumns);
    }
    return gridColumns;
}

  export function applyDefaultsToColumns(
    gridColumns: OptColumnExtended[],
    passPack: IPassPack
  ) {
    for (let index = 0; index < gridColumns.length; index++) {
      const column = gridColumns[index];
      //set the current column to new column with all defaults applied including its own specific settings
      gridColumns[index] = createNewColumnWithSystemAndUserDefaults(passPack,column.name, column);
    }
  }

    /**
   * Autogenerate columns based on a data object
   * @param passPack
   * @param data
   * @returns
   */
    export function  autoGenerateColumns(
        passPack: IPassPack,
        data?: any[]
      ): OptColumnExtended[] {
        let retValue: OptColumnExtended[] = [];
        if(!data) return retValue
    
        //setup column defaults from default settings and any column configuration passed in the settings
        let colDefaults: OptColumnExtended = createNewColumnWithSystemAndUserDefaults(passPack,undefined);
    
          //try autogenerate based on data we have
        if (data) {
          if (data[0]) {
            for (const property in data[0]) {
              let existingCol = passPack.processedSettings.optGrid?.columns.find(
                (column) => column.name == property
              ) as OptColumnExtended;
              if (!existingCol) {
                //only autogenerate if we dont already have one specified
                let newCol: OptColumnExtended = {
                  name: property,
                };
               
                applySettingsToObject(newCol, colDefaults, "primary");
    
                //Add header and convert to propper case
                newCol.header = property;
                if (newCol.header.length > 3) {
                  const result = property.replace(/([A-Z])/g, " $1");
                  newCol.header = result.charAt(0).toUpperCase() + result.slice(1);
                }
                retValue.push(newCol);
              }
            }
          }
        }
    
        return retValue;
      }

export function createNewColumnWithSystemAndUserDefaults(passPack: IPassPack, name?: string, existing?: OptColumnExtended) {
  let priorityTo : "primary" | "settings" | undefined = "settings"
  if(existing) priorityTo = "primary"

  let colDefaults: OptColumnExtended = existing ||  {
        name: name || "notSet"
    };

     //apply system defaults
     applySettingsToObject(
        colDefaults,
        new AS_K2_DataTable_Default_Column_Settings,
        "primary"
    );

    //apply user defined defaults 
    applySettingsToObject(
        colDefaults,
        passPack.processedSettings.columnDefaults,
        priorityTo
    );

    if(name)
    {
        let foundColumn =passPack.processedSettings.optGrid?.columns?.find(c=>c.name==name)

        //apply specific user defined column settings with top priotity
        applySettingsToObject(
            colDefaults,
            foundColumn,
            priorityTo
        );

        colDefaults.name=name
    }

    return colDefaults;
}
    