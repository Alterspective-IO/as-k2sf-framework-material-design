import { ContainerType, ControlType } from "../interfaces/enums";
import { IContainer } from "../interfaces/IContainer";
import { IFramework } from "../interfaces/IFramework";
import { TypeView } from "../interfaces/AutoGenerated/so-controller";
export declare class BaseArray<T, D, P extends IContainer> extends Array<T> {
    constructor(TCreator: {
        new (obj: D, parent: P): T;
    }, objectArray: D[] | undefined, parent: P);
}
export declare class BaseItem<D, P extends IContainer> implements IContainer {
    containerType: ContainerType;
    containerSubType: TypeView | ControlType;
    name: string;
    parent: P;
    formId: string;
    id?: string;
    _as: IFramework;
    rawData: any;
    constructor(obj: D, parent: P);
    get configurationName(): string;
    getHTMLElement(): HTMLElement;
}
