import { Framework } from "./framework";
import * as Definition from "../interfaces/AutoGenerated/so-rulesv2";
import { SourceType } from "../interfaces/AutoGenerated/so-rulesv2";
import { IFramework } from "../interfaces/IFramework";
import { IViewInstance } from "../interfaces/IViewInstance";
import { IControl } from "../interfaces/IControl";
import { IForm } from "../interfaces/IForm";
export declare enum ActionType {
    ApplyStyle = "ApplyStyle",
    Calculate = "Calculate",
    Execute = "Execute",
    ExecuteControl = "ExecuteControl",
    Exit = "Exit",
    Transfer = "Transfer",
    Validate = "Validate",
    List = "List",
    Open = "Open",
    Popup = "Popup"
}
export declare enum LocationEnum {
    Control = "Control",
    ObjectProperty = "ObjectProperty",
    Result = "Result",
    Value = "Value",
    ViewField = "ViewField",
    ViewParameter = "ViewParameter",
    ItemState = "ItemState",
    SystemVariable = "SystemVariable",
    Form = "Form",
    Rule = "Rule",
    SourceTypeView = "view",
    View = "View"
}
export declare const xmlProxyHandler: {
    get: (target: XMLBase<any>, name: string, receiver: any) => any;
    set: (target: any, name: string, value: any, receiver: any) => boolean;
};
export declare class XMLBase<Parent> {
    _as: IFramework | undefined;
    element: Element;
    parent: Parent | undefined;
    constructor(element: Element, as?: IFramework, parent?: Parent);
    populateProperties(): void;
}
export declare class Rules extends XMLBase<IForm> implements Omit<Definition.Events, "event"> {
    constructor(__runtimeEventsDefinition: string, as: Framework);
    renderWorkflowStrip: string;
    hasServerEvent: string;
    rules: Array<Rule> | undefined;
}
export declare class Rule extends XMLBase<IViewInstance | IForm | IControl> implements Omit<Definition.Event, "isReference" | "isInherited" | "handlers"> {
    constructor(xmlEventElement: Element, as?: IFramework);
    name: string;
    _attachedListeners: any[];
    sourceId: string;
    sourceType: SourceType;
    instanceId?: string | undefined;
    id: string;
    definitionId: string;
    type: Definition.EventType;
    isEnabled: string;
    ruleFriendlyName?: string | undefined;
    location?: string | undefined;
    viewId?: string | undefined;
    isCustomName?: string | undefined;
    ruleName?: string | undefined;
    subformId?: string | undefined;
    subformInstanceId?: string | undefined;
    formId?: string | undefined;
    ruleDescription?: string | undefined;
    eventTarget: EventTarget;
    handlers: Array<Handler>;
    private setParent;
    isUnboundRule: boolean;
    isFormLevelRule: boolean;
    execute(): any;
    addListener(id: string, callback: (evt: CustomEvent<Rule>) => void): void;
    get getEventName(): string;
    dispatch(): boolean;
    removeListener(id: string): void;
}
export declare class Handler extends XMLBase<Rule> {
    constructor(element: Element, as?: IFramework, parent?: Rule);
    conditions: Condition[] | undefined;
    actions: Array<Action>;
    type: Definition.HandlerType;
}
export declare class Condition extends XMLBase<Handler> implements Definition.ConditionElement, Definition.PurpleCondition {
    constructor(element: Element, as?: IFramework, parent?: Handler);
    isReference: Definition.Is;
    isInherited: Definition.Is;
    logic: ConditionLogic[] | undefined;
}
export declare class ConditionLogic extends XMLBase<ConditionLogic | Condition> {
    constructor(element: Element, as?: IFramework, parent?: ConditionLogic | Condition);
    item: Item[];
    logic: ConditionLogic[] | undefined;
    type: string;
}
export declare class Item extends XMLBase<ConditionLogic> implements Omit<Definition.Item, "sourceValue"> {
    constructor(element: Element, as?: IFramework, parent?: ConditionLogic);
    dataType?: Definition.DataType | undefined;
    sourceId?: string | undefined;
    sourceType: Definition.ItemLocation;
    sourceName?: string | undefined;
    sourceDisplayName?: string | undefined;
    sourceInstanceId?: string | undefined;
    sourceSubFormId?: string | undefined;
    sourceValue: string | undefined;
    get sourceObject(): IControl | undefined;
}
export declare class Action extends XMLBase<Handler> {
    constructor(element: Element, as?: IFramework, parent?: Handler);
    id: string;
    definitionId: string;
    type: ActionType;
    executionType: Definition.ExecutionType;
    isReference: Definition.Is;
    isInherited: Definition.Is;
    itemState: Definition.ItemState;
    instanceId: string;
    location: LocationEnum;
    method?: string | undefined;
    viewId?: string | undefined;
    designTemplate?: string | undefined;
    parameters?: Definition.ParameterElement[];
    results?: Definition.ParameterElement[];
    objectId?: string | undefined;
    eventId?: string | undefined;
    messageLocation?: LocationEnum;
    groupId?: string | undefined;
    ignoreInvisibleControls?: string | undefined;
    ignoreDisabledControls?: string | undefined;
    ignoreReadOnlyControls?: string | undefined;
    subformId?: string | undefined;
    heading?: string | undefined;
    formId?: string | undefined;
    controlId?: string | undefined;
    order?: Definition.Order | undefined;
    filter?: Definition.ActionFilter | undefined;
}
