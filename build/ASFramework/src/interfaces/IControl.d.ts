import { ControlType } from "./enums";
import * as ControllerDefinition from "./AutoGenerated/so-controller";
import { ISmartObject } from "./SmartObjects/ISmartObject";
import { IControlExtensions } from "./IControlExtensions";
import { IControlRules } from "./IControlRules";
import { IControlEvents } from "./IControlEvents";
import { IContainer } from "./IContainer";
import { IContentControl } from "./IContentControl";
import { IAttachedCustomControl } from "./IAttachedCustomControl";
import { IField } from "./IField";
import { ChangedPropertyEvent, EventTimingOption } from "./IEvents";
export interface IControl extends Omit<ControllerDefinition.Control, "properties" | "type" | "id">, IContainer {
    addPropertyListener(type: string, timing: EventTimingOption, callback: (evt: CustomEvent<ChangedPropertyEvent>) => void): void;
    dispatchPropertyEvent(type: string, timing: EventTimingOption, event: ChangedPropertyEvent): boolean;
    removePropertyListener(type: string, timing: EventTimingOption, callback: (evt: CustomEvent<ChangedPropertyEvent>) => void): void;
    type: ControlType;
    value: string | undefined;
    execute(method: string, optionalPropertyName: string, optionalValue: string): any;
    getControlPropertyValue(propertyName: string): any;
    setControlPropertyValue(propertyName: string, propertyValue: string): void;
    getPropertyValue(property: string): any;
    setPropertyValue(property: string, value: any): void;
    setControlVisibility(IsVisible: boolean): void;
    asContentControl(): IContentControl;
    attachedCustomControl?: IAttachedCustomControl;
    attachedEvents: Array<any>;
    events: IControlEvents;
    rules: IControlRules;
    field: IField | null;
    extensions?: IControlExtensions;
    smartobject: ISmartObject;
}
