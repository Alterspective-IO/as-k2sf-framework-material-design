import * as jp from "jsonpath-plus";
import { isDefined, searchObjects } from "./Helpers/framework.utils";
import * as xpath from "xpath-ts";
import * as ControllerDefinition from "../interfaces/AutoGenerated/so-controller";
import { IView } from "../interfaces/IView";
import { ISearch } from "../interfaces/ISearch";
import { IFramework } from "../interfaces/IFramework";

export class Search {
  _as: IFramework;

  constructor(as: IFramework) {
    this._as = as;
  }

  definitions_getViewInstanceById(viewInstanceID: string) {
    if (!this._as) throw "_as not defined";
    return jp.JSONPath({
      path: `$..control[?(/${viewInstanceID}$/i.test(@.id))]`,
      json:
        this._as?.supportingObjects?.__runtimeControllersDefinition_Object ||
        {},
    });
  }

  definitions_getViewInstanceControl(
    formId: string,
    viewInstanceId: string
  ): ControllerDefinition.Control | undefined {
    if (!this._as) throw "_as not defined";

    return this._as?.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.controller[0].controls?.control.find(
      (c) => c.id == `${formId}_${viewInstanceId}`
    );
  }

  definitions_getViewInstancesByViewId(
    viewId: string
  ): ControllerDefinition.Controller[] {
    if (!this._as) {
      console.warn("_as not defined");
      return [];
    }
    return this.select(
      this._as?.supportingObjects?.__runtimeControllersDefinition_Object,
      `$..controller[?(@.id=='${viewId}')]`
    );
  }

  select(object: any, path: string) {
    let options: jp.JSONPathOptions = {
      path: path,
      json: object,
    };
    return jp.JSONPath(options);
  }

  get_ViewById(id: string) {
    if (!this._as) throw "_as not defined";
    return this._as?.form?.views.find((v: IView) => v.id == id);
  }

  x(path: string, xml: string) {
    const doc = new DOMParser().parseFromString(xml, "text/xml");
    const nodes = xpath.select(path, doc) as Node[];
    //debugger;
    if (Array.isArray(nodes[0])) {
      console.log("Node: " + nodes[0].toString());
    }
  }

  getObjectsByPropertyValue(
    array: Array<any> | undefined,
    property: string,
    value: string
  ) {
    if (array == undefined) return null;
    let results = Array<any>();

    array.forEach((obj) => {
      if (isDefined(obj[property])) {
        if (obj[property] === value) {
          results.push(obj);
        }
      } else {
        console.warn(`object does not contain property ${property}`);
      }
    });
    return results;
  }
}
