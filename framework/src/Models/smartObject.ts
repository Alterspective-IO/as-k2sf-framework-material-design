import { Type } from "../interfaces/AutoGenerated/so-controller";
import { IControl } from "../interfaces/IControl";
import { IFramework } from "../interfaces/IFramework";
import { IViewInstance } from "../interfaces/IViewInstance";
import { IFieldInfo, ISmartObject } from "../interfaces/SmartObjects/ISmartObject";
import { k2FieldTypeToJavascriptType } from "./Helpers/TypeConverter";


// export function addSmartObjectToControl(control : Control) {
//     control.smartObject = function () {
//       let retValue: ISmartObject = { exists: false };
//       retValue.parent = control

//       var hash =
//         control._as.window.ViewHiddenHash[
//           control.parent?.parent?.id + "_" + control.parent.id
//         ];
//       if (hash) {
//         let smartObjectItems = hash.filter(function (data:any) {
//           return data.controlid == control.id;
//         });
//         if (smartObjectItems.length > 0) {
//           retValue.exists = true;
//           retValue.name = smartObjectItems[0].name;
//           retValue.join = smartObjectItems[0].join;
//           retValue.items = [];
//           smartObjectItems.forEach(function (item:any) {
//             let newItem : any = {}//item.fields;

//             Object.keys(item.fields).forEach(key=>{
//               newItem[key] = item.fields[key].value
//             })

            
//             //if (!newItem.asLineItemCounter) {
//               //newItem["asLineItemCounter"] = item.counter;
//             //}
//             if (item.joins) {
//               newItem.Joins = [];
//               item.joins.forEach(function (join:any) {
//                 var newJoin = join.fields;
//                 newJoin.JoinedSmartObjectName = join.name;

//                 newItem.Joins.push(newJoin);
//               });
//             }
//             retValue.items?.push(newItem);
//           });
//         }
//       }
//       return retValue;
//     };
//   }


  export function getViewInstanceSmartobject(viewInstance: IViewInstance ) : ISmartObject {
    
    let smartObjectItems
    //gets the has for the view instance
    var hash = getViewInstanceHashes(viewInstance);
    if (hash) { //find the smartobjects for the control
      smartObjectItems = hash.filter( (data:any) => {
        return data.contexttype == "Primary" && data.counter;
      });
    }
  
    return processSmartobject(smartObjectItems, viewInstance._as);;   
      
    }

    

export function getControlSmartobject(control : IControl) : ISmartObject
{      
  let smartObjectItems
  //gets the has for the view instance
  var hash = getViewInstanceHashes(control.parent as IViewInstance);
  if (hash) { //find the smartobjects for the control
    smartObjectItems = hash.filter( (data:any) => {
      return data.controlid == control.id;
    });
  }

  return processSmartobject(smartObjectItems, control._as);;

}

function getViewInstanceHashes(viewInstance: IViewInstance) {
  return viewInstance._as!.window.ViewHiddenHash[viewInstance.parent?.id + "_" + viewInstance.id];
}

function processSmartobject(smartObjectItems: any, as:IFramework) : ISmartObject {
  let retValue : ISmartObject =
  {
    fieldInfo: [],
    exists: false
  }

  if(!smartObjectItems) return retValue
  if(!Array.isArray(smartObjectItems)) return retValue
    if (smartObjectItems.length > 0) {

    //retValue.fieldInfo = [{"propertyName":"name", "k2Type":"string","javascriptType":typeof "string" }]
    //Search for controls that are binded to this smartobject and get the data types
    retValue.fieldInfo= populateFieldInfo(smartObjectItems, as);

    retValue.exists = true;
    retValue.name = smartObjectItems[0].name;
    retValue.join = smartObjectItems[0].join;
    retValue.items = [];
    smartObjectItems.forEach(function (item: any) {
      let newItem: any = {}; //item.fields;  
      Object.keys(item.fields).forEach(key => {
        newItem[key] = item.fields[key].value;
      });

      newItem._linkedHiddenHash = item

      //if (!newItem.asLineItemCounter) {
      //newItem["asLineItemCounter"] = item.counter;
      //}
      if (item.joins) {
        newItem.Joins = [];
        item.joins.forEach(function (join: any) {
          //var newJoin = join.fields;
          let newJoin: any = {};
          Object.keys(join.fields).forEach(jkey => {
            newJoin[jkey] = join.fields[jkey].value;
          });
          newJoin.JoinedSmartObjectName = join.name;
          newItem.Joins.push(newJoin);
        });
      }
      retValue.items?.push(newItem);
    });
  }
  return retValue
}

function populateFieldInfo(smartObjectItems: Array<any>, as: IFramework) : IFieldInfo[] {
  let fieldInfoArray = new Array<IFieldInfo>();

  if(!smartObjectItems) return fieldInfoArray
  if(!Array.isArray(smartObjectItems)) return fieldInfoArray
  if(smartObjectItems.length==0) return fieldInfoArray

  let parentId = smartObjectItems[0].parentid; //Note: parentid all lowercase in K2 as of 25/05/2022
  if(!parentId) return fieldInfoArray
  if(!smartObjectItems[0].fields) return fieldInfoArray

  for (const key in smartObjectItems[0].fields) {
    let smartobjectFieldControls = as.collections.viewInstanceControls.filter(c => c.field?.objectId == parentId && c.field?.name == key);

    if (smartobjectFieldControls.length > 0) {
      let k2Type: Type = smartobjectFieldControls[0].field?.propertyType || Type.Text; //get the type from the first found control
      let newFieldInfo: IFieldInfo = {
        propertyName: key,
        k2Type: k2Type,
        javascriptType: k2FieldTypeToJavascriptType(k2Type),
        fieldControls: smartobjectFieldControls
      };
      fieldInfoArray.push(newFieldInfo);
    }
  }
  return fieldInfoArray
}

// export function cleanupSmartobject()
// {
//   let retValue: ISmartObject = { exists: false , fieldInfo: []};         
//         var hash =
//           this._as!.window.ViewHiddenHash[
//             this.parent?.parent?.id + "_" + this.parent!.id
//           ];
//         if (hash) {
//           let smartObjectItems = hash.filter( (data:any) => {
//             return data.controlid == this.id;
//           });
//           if (smartObjectItems.length > 0) {

//             //retValue.fieldInfo = [{"propertyName":"name", "k2Type":"string","javascriptType":typeof "string" }]
//             //Search for controls that are binded to this smartobject and get the data types
//             let parentId = smartObjectItems[0].parentid; //Note parentid all lowercase in K2 as of 25/05/2022
//             for(const key in smartObjectItems[0].fields)
//             {
//                 let smartobjectFieldControls = this._as.collections.viewInstanceControls.filter(c=>c.field?.objectId==parentId && c.field?.name == key)

//                 if(smartobjectFieldControls.length>0)
//                 {
//                     let k2Type : Type = smartobjectFieldControls[0].field?.propertyType || Type.Text //get the type from the first found control
//                     let newFieldInfo : IFieldInfo =
//                     {
//                         propertyName: key,
//                         k2Type: k2Type,
//                         javascriptType:k2FieldTypeToJavascriptType(k2Type)                        ,
//                         fieldControls: smartobjectFieldControls
//                     }
//                     retValue.fieldInfo.push(newFieldInfo)
//                 }
//             }

//             retValue.exists = true;
//             retValue.name = smartObjectItems[0].name;
//             retValue.join = smartObjectItems[0].join;
//             retValue.items = [];
//             smartObjectItems.forEach(function (item:any) {
//               let newItem : any = {}//item.fields;  
//               Object.keys(item.fields).forEach(key=>{
//                 newItem[key] = item.fields[key].value
//               })  
              
//               //if (!newItem.asLineItemCounter) {
//                 //newItem["asLineItemCounter"] = item.counter;
//               //}
//               if (item.joins) {
//                 newItem.Joins = [];
//                 item.joins.forEach(function (join:any) {
//                   //var newJoin = join.fields;
//                   let newJoin:any = {}
//                   Object.keys(join.fields).forEach(jkey=>{
//                     newJoin[jkey] = join.fields[jkey].value
//                   })
//                   newJoin.JoinedSmartObjectName = join.name;  
//                   newItem.Joins.push(newJoin);
//                 });
//               }
//               retValue.items?.push(newItem);
//             });
//           }
//         }
//         return retValue;
// }

