import { autoMapAttributesToProperties } from "../processors";
import { BaseArray, BaseItem } from "./base";
import { Controls } from "./control";
import { ContainerType, ControlType } from "../interfaces/enums";
import { IView } from "../interfaces/IView";
import { getViewInstanceSmartobject } from "./smartObject";
import { IControllerDefinition } from "../interfaces/AGIControllerDefinition";
import { IControlRules } from "../interfaces/IControlRules";
import { IControls } from "../interfaces/IControls";
import { IFields } from "../interfaces/IFields";
import { INameValue } from "../interfaces/INameValue";
import { IStyleElement } from "../interfaces/IStyleElement";
import { IControlOfView } from "../interfaces/IControlOfView";
import { IViewInstance } from "../interfaces/IViewInstance";
import { IViewInstances } from "../interfaces/IViewInstances";
import { ISmartObject } from "../interfaces/SmartObjects/ISmartObject";
import {
  EventTimingOption,
  ViewInstanceEventDetails,
  ViewInstanceEventTypeOption,
} from "../interfaces/IEvents";
import { Rule } from "./rulev2";
import { Log, LogType } from "./framework.performance";
import {
  ControlTemplate,
  TypeView,
} from "../interfaces/AutoGenerated/so-controller";
import { IControl } from "../interfaces/IControl";
import { IContainer } from "../interfaces/IContainer";
import { IFramework } from "../interfaces/IFramework";
import { sortedIndex } from "lodash";

export class ViewInstances
  extends BaseArray<ViewInstance, IControllerDefinition.Controller, IView>
  implements IViewInstances
{
  constructor(
    controllers: IControllerDefinition.Controller[] | undefined,
    parent: IView
  ) {
    //  let p = new PerformanceSession("ViewInstances.Constructor()")
    super(ViewInstance, controllers, parent);
    //  p.finish()
  }
}
export class ViewInstance
  extends BaseItem<IControllerDefinition.Controller, IView>
  implements IViewInstance
{
  constructor(view?: IControllerDefinition.Controller, parent?: IView) {
    //let p = new PerformanceSession("ViewInstance.Constructor()")
    super(view!, parent!);

    if (!view) return;

    if (this.containerType == ContainerType.form) {
      this.isFormViewInstance = true;
    } else {
      this.isFormViewInstance = false;
    }

    // this.contextId = undefined;
    // this.contextType = undefined;
    // this.dataSourceId = undefined;
    // this.typeView=TypeView.Empty;
    // this.instanceId = undefined;
    // this.isEnabled = undefined;
    // this.mainTable = undefined;
    // this.controlOfView = new controlOfView(undefined);
    // this._rules = {};
    autoMapAttributesToProperties(view, this);

    this.name = "";
    this.containerType = ContainerType.viewInstance;
    this.containerSubType = view?.typeView || TypeView.Empty;

    if (this.instanceId) {
      let controlOfViewObj =
        this._as?.search?.definitions_getViewInstanceControl(
          "00000000-0000-0000-0000-000000000000",
          this.instanceId
        );
      this.id = controlOfViewObj?.id;
      this.controlOfView = new controlOfView(controlOfViewObj);
      this.name = this.controlOfView.name || "";
    }

    // this.associations = view.associations?.association //TODO

    this.id = view?.instanceId || "";
    this.viewId = view?.id || "";

    this.associations = [];
    this.fields = [];

    this.controls = new Controls(view?.controls?.control, this);
    this.viewInstanceManipulations = new ViewInstanceManipulations(this);

    //add this view instance to all view instances
    this._as.collections?.viewInstances?.push(this);

    // p.finish();

    // this.properties = validateArray<IControllerDefinition.FluffyProperty>(view.properties?.property)
  }
  // containerSubType: IControllerDefinition.TypeView | ControlType;

  isFormViewInstance: boolean = false;
  controlOfView: IControlOfView = new controlOfView(undefined);
  viewId: string = "";
  controls: IControls = [];
  associations: { [key: string]: string }[] = [];
  fields: IFields = [];
  typeView: IControllerDefinition.TypeView =
    IControllerDefinition.TypeView.Empty;
  instanceId: string | undefined = undefined;
  panelId: string | undefined = undefined;
  mainTable: string | undefined = undefined;
  dataSourceId: string | undefined = undefined;
  contextId: string | undefined = undefined;
  contextType: IControllerDefinition.TType | undefined = undefined;
  viewName: string | undefined = undefined;
  isEnabled: string | undefined = undefined;
  //Additional
  viewInstanceManipulations?: ViewInstanceManipulations;

  eventTarget = new EventTarget();

  as<T extends ListViewInstance>(c: { new (): T }): T {
    let retValue = new c();
    Object.assign(retValue, this);
    return retValue;
  }

  public addListener(
    type: ViewInstanceEventTypeOption,
    callback: (evt: CustomEvent<ViewInstanceEventDetails>) => void
  ): void {
    return this.eventTarget.addEventListener(
      type,
      callback as (evt: Event) => void
    );
  }

  public dispatch(type: ViewInstanceEventTypeOption): boolean {
    let details: ViewInstanceEventDetails = {
      type: type,
      viewInstance: this,
    };
    Log(`viewInstance [${this.name}] dispatching event [${type}] `, {
      logType: LogType.events,
    });
    return this.eventTarget.dispatchEvent(
      new CustomEvent(type, { detail: details })
    );
  }

  public removeListener(
    type: ViewInstanceEventTypeOption,
    callback: (evt: CustomEvent<any>) => void
  ): void {
    return this.eventTarget.removeEventListener(
      type,
      callback as (evt: Event) => void
    );
  }

  get smartobject(): ISmartObject {
    return getViewInstanceSmartobject(this);
  }
  //on demand

  //private _rulesInitialized: boolean = false;
  public get rules(): Rule[] {
    //if (this._rulesInitialized == false) {
    //  this._rules = {};
    return (
      this._as.collections.rules?.rules?.filter(
        (r) => r.instanceId == this.instanceId
      ) || []
    );

    // controlRules.forEach((r) => {
    //   this._rules[r.name] = r;
    //  });
    //  this._rulesInitialized = true;
    // }

    //return this._rules;
  }
}

export class controlOfView implements IControlOfView {
  constructor(viewControlDetails: IControllerDefinition.Control | undefined) {
    this.dataType = viewControlDetails?.dataType;
    this.id = viewControlDetails?.id;
    this.name = viewControlDetails?.name;
    this.properties = undefined;

    if (viewControlDetails) {
      autoMapAttributesToProperties(viewControlDetails, this);
      let controlPropertiesProperties = (
        viewControlDetails.properties as IControllerDefinition.PropertiesProperties
      ).property;

      if (Array.isArray(controlPropertiesProperties))
        this.properties = controlPropertiesProperties;
      else {
        if (controlPropertiesProperties)
          this.properties = [controlPropertiesProperties];
      }
    }
  }

  properties: INameValue[] | undefined;
  dataType: string | undefined;
  id: string | undefined;
  name: string | undefined;
  styles: IStyleElement[] | undefined;
  type: string | undefined;
}

export class ViewInstanceManipulations {
  constructor(public viewInstance: ViewInstance) {}
  makeMovable(width: string = "100%") {
    // debugger;
    $("body").append(
      $(this.viewInstance.getHTMLElement())
        .draggable()
        .css("z-index", 1)
        .css("position", "absolute")
        .css("width", width)
    );
  }
}

export class ListViewInstance extends ViewInstance {
  _cols: IControl | undefined;
  
  
  getSelectedRowCounter() : string | undefined
  {
    let jObject = $('#' +this.mainTable)
     let selected = window.getViewSelectedCounter(this.mainTable!)
     try{
       
       if(typeof selected =="undefined")
       {
         return undefined
       }
       else
       {
         return selected as string
        }
     }
     catch
     {
       return undefined
     }
  }

 getSelectedRowData() : any | undefined
  {
    let selectedRow = this.getSelectedRowCounter()
    if(!selectedRow) return undefined
    return this.smartobject.items?.find(soi=> soi._linkedHiddenHash.counter == selectedRow)
  }

  setSelectedRowByCounter(counter:string)  
  {
    this.simulateUserEventAgainstCounterRow(counter,"click")

  }

  simulateUserEventAgainstCounterRow(counter: string, action: "click" | "dblclick")  
  {

    let firstElementForCounter = this.getHTMLElement().querySelector(`[data-options*='"counter":"${counter.toString()}"']`)
    if(firstElementForCounter)
    {
      try{
        var event = new MouseEvent(action, {
          'view': window,
          'bubbles': true,
          'cancelable': true
        });
        firstElementForCounter.dispatchEvent(event);
      }
      catch (err)
      {
          console.warn(`Error simulating ${action} on row counter ${counter} on list view ${this.name}`)
      }
      
    }
  }
  
  
  getColumnControls(): {
    header?: IControl;
    column?: IControl;
    display?: IControl;
  }[] {
    let resultSet = new Array<{
      header?: IControl;
      column?: IControl;
      display?: IControl;
    }>();
    let columnHeaderTableClass = "grid-column-header-table";
    let columnCol_HTMLElements = $(`.${columnHeaderTableClass} col`, this.getHTMLElement());

    let columnContentTableClass = "grid-content-table";
    let contentsCol_HTMLElements = $(`.${columnContentTableClass} col`, this.getHTMLElement());
    

    for (let index = 0; index < columnCol_HTMLElements.length; index++) {
      const columnColElement = columnCol_HTMLElements[index];
      const contentsColElement = contentsCol_HTMLElements[index];

      if(!columnColElement || !contentsColElement)
      {
        console.warn(`Failed to find elements for list view ${this.name}`)
        continue;
      }

      

      let columnControl: IControl | undefined;
      let headerControl: IControl | undefined;
      let displayControl: IControl | undefined;


      let elementOptions = columnColElement.dataset.options;
      if (!elementOptions) continue;
      try {
        let elementOptionsObject = JSON.parse(columnColElement.dataset.options!);
        columnControl = this.controls.find((c) => c.id == elementOptionsObject.name);
      } catch {}

      if(!columnControl)
      {
        console.warn(`Failed to find control for list view ${this.name} column element`,columnColElement)
        continue;
      }

      let colHeaderElement = $(`.grid-column-header-text.${columnControl.id}`, this.getHTMLElement())[0];
      if(!colHeaderElement)
      {
        console.warn(`Failed to find header element for list view ${this.name} column `,columnControl.name)
        continue;
      }

      //grid-column-header-text has two IDs 
      //c47aeb48-6e39-9068-9026-00749a329b96_87699fdb-380b-33b6-e0cc-c94a47ede7d3 = type="Label" controlTemplate="header"
      //c47aeb48-6e39-9068-9026-00749a329b96_a07c324e-c256-7eac-df86-2e0bdc9ea6d8 = column Type="Column" controlTemplate"none"

      colHeaderElement.classList.forEach((ci) => {
        if (ci != columnHeaderTableClass) {
          if (!headerControl)
            headerControl = this.controls.find(
              (c: any) =>
                c.id == ci && c.controlTemplate == ControlTemplate.Header
            );         
        }
      });

      if(!headerControl)
      {
        console.warn(`Failed to find header control for list view ${this.name} column ${columnControl.name} and header element `,colHeaderElement)
        continue;
      }

      //find the display control ( if it exists as 0 rows means 0 display column )
      if (columnControl) {
        let displayParentElement = $(
          `.${columnControl.id} .SourceCode-Forms-Controls-Web-DataLabel`
        )[0];
        if (displayParentElement) {
          if (displayParentElement.id) {
            let displayControlId = displayParentElement.id;
            displayControl = this.controls.find(
              (c) => c.id == displayControlId
            );
          } else {
            // console.warn(
            //   `Column ${columnControl.name} displayControlElement has not ID`
            // );
          }
        } else {
          // console.warn(
          //   `Column ${columnControl.name} could not find displayControlElement`
          // );
        }
      }

      resultSet.push({
        header: headerControl,
        column: columnControl,
        display: displayControl,
      });
    }

    return resultSet;
  }
}

let m = ListViewInstance;
