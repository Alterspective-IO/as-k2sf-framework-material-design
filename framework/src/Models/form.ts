import { isDefined } from "./Helpers/framework.utils";
import { Views } from "./view";
import { PerformanceSession } from "./framework.performance";
import { ContainerType, ControlType } from "../interfaces/enums";
import { Controller, TypeView } from "../interfaces/AutoGenerated/so-controller";
import { IContainer } from "../interfaces/IContainer";
import { IForm } from "../interfaces/IForm";
import { IFramework } from "../interfaces/IFramework";
import { IExpressions } from "../interfaces/IExpressions";
import { IViews } from "../interfaces/IViews";
import { IParametersArray } from "../interfaces/Iparameters";
import { ParametersArray } from "./parameters";

export class Form implements IForm, IContainer {

    url: string = ''
    _as: IFramework
    

    constructor(as: IFramework) {

        let p = new PerformanceSession("Forms.Constructor()")
        this._as = as
        this.containerType = ContainerType.form
       
        this.formId = this._as.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.formId || "00000000-0000-0000-0000-000000000000"
        if(Array.isArray(this._as.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.controller)==false)
        {
            this._as.supportingObjects!.__runtimeControllersDefinition_Object!.controllers.controller =[this._as.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.controller as unknown as Controller]
        }
        this.views = new Views(this._as.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.controller,this)

        //TODO:
        this.expressions = []
        this.validationGroups=""
        this.validationPatterns=""
        p.finish()
    }
    rawData: any;
    configurationName: string = "Form";
    containerSubType: TypeView | ControlType = TypeView.Empty;
    parent?: IContainer | undefined;
 
    id?: string | undefined;
    containerType: ContainerType;
   

     //Interface Implements
    expressions: IExpressions;
    validationGroups: string;
    validationPatterns: string;
    views: IViews;
    formId: string
   
  

    get parameters(): IParametersArray {
        let retValue = new ParametersArray(window._runtimeParameters.formParameters, this)
        return retValue
    }

    get name(): string {
        if (this.exists) { return $("head>title").text().trim(); }
        else { return '' }
    }

  

    get controlsBaseId():string{
        
        if(this.exists)
        if(this._as.supportingObjects?.__runtimeControllersDefinition_Object)
        if(this._as.supportingObjects.__runtimeControllersDefinition_Object.controllers.controller[0])
        return this._as.supportingObjects.__runtimeControllersDefinition_Object.controllers.controller[0].id || '';
        
        console.warn("No form found")
        return '';

    }
    get exists(): boolean {return isDefined(this._as.supportingObjects?.__runtimeControllersDefinition_Object?.controllers.formId)}

    getHTMLElement():HTMLElement
    {
        return $("body")[0]
    }
}