import { getContainerElement } from "./html-helpers";
import { ContainerType, ControlType } from "../interfaces/enums";
import { IContainer } from "../interfaces/IContainer";
import { IFramework } from "../interfaces/IFramework";
import { TypeView } from "../interfaces/AutoGenerated/so-controller";
import { Log } from "./framework.performance";

export class BaseArray<T, D, P extends IContainer> extends Array<T> {
  constructor(
    TCreator: { new (obj: D, parent: P): T },
    objectArray: D[] | undefined,
    parent: P
  ) {
    super();
    // console.log("BaseArray : " + this.constructor.name)
    if (objectArray === undefined) objectArray = [];
    if (Array.isArray(objectArray)) {
      objectArray.forEach((item) => {
        let f = new TCreator(item, parent);
        //let f = new BaseItem<D>(item)
        this.push(f);
      });
    }
  }
}

export class BaseItem<D, P extends IContainer> implements IContainer {
  containerType: ContainerType = ContainerType.notSet;
  containerSubType: TypeView | ControlType = TypeView.Empty;
  name: string = "";
  parent!: P;
  formId!: string;
  id?: string = "";
  _as!: IFramework;
  rawData: any;

  
  constructor(obj: D, parent: P) {
    
    if (obj == undefined) {
      console.warn("obj:D is undefined!");
      return;
    }

    this.rawData = obj
    //autoMapAttributesToProperties(obj, this) -- doesn't work if derived class has defaults on properties

    let anyObj = obj as any;
    if (anyObj) {
      if (
        typeof anyObj.id === "string" &&
        anyObj.id == "00000000-0000-0000-0000-000000000000"
      ) {
        this.containerType = ContainerType.form;
        this.name = "Form"
      }
    }

    this._as = parent._as;
    this.formId = parent.formId;
    this.parent = parent;
  }
 
    get configurationName(): string {

        return this.name + "," + this.parent.name
    }

  getHTMLElement(): HTMLElement {
    return getContainerElement(this);
  }
}
